{"meta":{"title":"dwdw666的笔记本","subtitle":"","description":"","author":"dwdw666","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2022-02-18T20:13:41.000Z","updated":"2022-02-18T20:14:03.483Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"操作系统课堂笔记","slug":"操作系统课堂笔记","date":"2022-02-20T20:15:25.000Z","updated":"2022-02-23T16:33:55.923Z","comments":true,"path":"2022/02/20/操作系统课堂笔记/","link":"","permalink":"http://example.com/2022/02/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/","excerpt":"","text":"清华大学os网课笔记操作系统的概述 操作系统是一个控制程序 管理应用程序， 为应用程序提供服务 杀死程序 资源管理：管理外设，分配资源 作为抽象层在物理层之上 作为系统软件为应用软件提供支持 面向应用程序的接口：shell 面向计算机内部的接口:kernal 硬件三大套：cpu 内存 磁盘 os kernel的特征： *并发**：一段时间内多个程序同时运行 并行*: 一个时间点内多个程序同时运行（多个cpu） *共享**：同时访问，互斥共享 *虚拟**：cpu-&gt;进程，磁盘-&gt;文件，内存-&gt;地址空间。多道文件设计，让用户觉得自己独享整个计算机。 *异步**：程序的执行是走走停停的,向前推进的速度不可预知。到那时只要环境相同，运行的结果也要相同。 操作系统历史 移动终端上linux应用广泛 cpu性能越越强 多道程序设计 分时调度：在于时钟会定时产生中断，每千分之一秒 未来的发展趋势：多核多处理，分布式操作系统 操作系统结构 微内核设计：尽然把内核服务放到用户空间。中断处理，消息传递 放到内核中。文件系统，网络协议放到用户空间，以服务的方式松耦合存在，而非函数调用的方式。代价是性能。 操作系统启动 bios-&gt;bootloader-&gt;os disk：存放os bios：基本io处理系统，开机检验外设 bootloader：加载os，让os从硬盘到内存中去 bios从一个特定的地址执行，cs：ip（cs:段寄存器，ip：指令寄存器） bootloader一般放在disk的第一个主引导扇区（512字节） 操作系统中的事件：中断，异常和系统调用 系统调用：异步或同步，来源于应用程序，应用程序主动向os发出服务请求 异常：同步，来源于不良的应用程序，非法指令（内存出错） 中断：异步，来源于外设（鼠标的移动，键盘的输入），不同的硬件设备的计时器和网络的中断 应用程序不能直接访问外设。内核是被信任的，内核统一的向程序暴露接口。 计算机体系结构/内存分层 抽象：逻辑地址空间 保护：独立地址空间 共享：访问相同内容 虚拟化：更多的地址空间 主存：物理内存，接电从硬盘读数据到主存 地址空间 物理地址空间—内存条代表的贮存，硬盘代表的磁盘 逻辑地址空间—一个运行的程序所拥有的内存范围 （0，max） cpu—mmu查找逻辑地址对应的物理地址，如果没找到就到内存中去找操作系统需要建立逻辑地址和物理地址的关系。 操作系统的地址安全检测 连续内存分配 空闲内存不能被利用 外部碎片 内部碎片 分区的动态分配 首次适配（first fit）：找到第一个满足 程序需求的连续空闲块 优点*:简单 缺点*:容易产生不合适的空闲块 最佳匹配（best fit）：使用最小的满足要求的空闲块 优点*:简单 缺点*:容易产生不合适的空闲块 最差分配原则(worst fit)：使用最大的满足要求的空闲快 *优点**：分配中等尺寸效果最好 *劣势**： 连续的内存分配算法 压缩式 交换式 非连续内存分配：分段 难点在于逻辑地址到物理地址的映射 操作系统维护段表 非连续内存的分配：分页 划分物理内存大小—帧frame 一个物理地址是一个二元数组（f，o） f—帧号（F位，一共有2的F次方个帧） o—帧内偏移位（s位，每帧有s的s次方字节） 物理地址 2^s*f + o 划分逻辑地址—页page 一个程序的逻辑地址空间被划分为大小相等的页 页内偏移的大小 页表 页表 建立方案 转换逻辑地址为物理地址page to frames cpu根据page number和 offeset在page table内寻址，之后根据找到的frame number 和offset去物理地址寻址 快表TLB使用关联内存实现 页表太大的问题：使用多级页表 多级页表的最后一层才是真正的寻找物理地址 反向页表*基于hash的方向页表： 虚拟内存 覆盖技术：使用分时的方式用同一块内存空间，需要确定各个模块的覆盖关系。 交换技术：操作系统管理程序，swap out吧一个进程的整个地址空间的内容包窜到外存中，而将外村中的某个进程的地址空间读入到内存中(swap in)。 交换时机的确定：只有当内存空间不够或者有不够的危险时换出 交换区的大小： 程序换入的重定位：换入换出在物理地址上不用在同一个地方，只需要更改页表，使得逻辑地址映射到同一个物理地址。虚存技术 不是替换整个进程的内存空间，而是部分替换。","categories":[{"name":"os","slug":"os","permalink":"http://example.com/categories/os/"}],"tags":[]},{"title":"vocabulaire","slug":"vocabulaire","date":"2022-02-20T11:28:40.000Z","updated":"2022-02-20T11:28:40.893Z","comments":true,"path":"2022/02/20/vocabulaire/","link":"","permalink":"http://example.com/2022/02/20/vocabulaire/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"toList","slug":"toList","date":"2022-02-18T19:53:09.000Z","updated":"2022-02-21T18:20:04.657Z","comments":true,"path":"2022/02/18/toList/","link":"","permalink":"http://example.com/2022/02/18/toList/","excerpt":"","text":"2022/2/19 排序算法：快排、插排、归并 的java实现 java Array.sort 解析 算法刷题 ✔️ 2022/2/20 算法刷题 ✔️ 阶段学习目标 2022/2/20 - 2022/2/30 最近阶段的目标重温操作系统的知识 算法刷题 2022/2/21 算法刷题 预习 操作系统知识 ✔️ 语言学习（法语单词） 健身 ✔️","categories":[{"name":"TodoList","slug":"TodoList","permalink":"http://example.com/categories/TodoList/"}],"tags":[]},{"title":"java中的重写与重载","slug":"java中的重写与重载","date":"2022-02-15T08:56:50.000Z","updated":"2022-02-18T20:15:46.721Z","comments":true,"path":"2022/02/15/java中的重写与重载/","link":"","permalink":"http://example.com/2022/02/15/java%E4%B8%AD%E7%9A%84%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/","excerpt":"","text":"重写子类重写父类的方法时需要保持参数和返回值的一致性，否则编译器就会报错。下面这个例子我们发现在circle类是属于Shape类对象的一个实例，在编译阶段只会检查Shape类中是否有testPoly这个方法。而在运行阶段jvm则会访问circle实例上的testPoly方法 1234567891011121314151617public class test&#123; public static void main(String args[])&#123; Shape circle = new Circle(); circle.testPoly(); &#125;&#125;class Shape&#123; public void testPoly()&#123; System.out.println(&quot;shape&quot;); &#125;&#125;class Circle extends Shape&#123; //重写父类的方法 保持参数和返回值的一致性 public void testPoly()&#123; System.out.println(&quot;circle&quot;); &#125;&#125; 重写的规则（摘自互联网） 参数列表与被重写方法的参数列表必须完全相同。 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。 父类的成员方法只能被它的子类重写。 声明为 final 的方法不能被重写。 声明为 static 的方法不能被重写，但是能够被再次声明。 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。 子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。 构造方法不能被重写。 如果不能继承一个类，则不能重写该类的方法。 重载重载的时候必须在类内部，其中 函数的参数列表必须不一样，不然会报错 1234567public void test1()&#123; System.out.println(&quot;test1&quot;); &#125; public int test1(int param)&#123; System.out.println(&quot;test2&quot;); return 2; &#125; 总结类的重写是多态在父类与子类中的一种体现，而类的重载是多态在一个类内部的一种体现","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[]},{"title":"git 撤销修改的方法","slug":"git-撤销修改的方法","date":"2022-02-15T08:13:37.000Z","updated":"2022-02-18T20:16:51.471Z","comments":true,"path":"2022/02/15/git-撤销修改的方法/","link":"","permalink":"http://example.com/2022/02/15/git-%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"git基本概念 工作区： 工作目录 暂存区： （stage）.git文件夹下的index文件，也叫索引 版本库： .git文件夹 撤销修改的方法 当对工作区修改（或新增）的文件执行 git add 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 当执行 git rm --cached &lt;file&gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。 当执行 git checkout . 或者 git checkout -- &lt;file&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。 当执行 git checkout HEAD . 或者 git checkout HEAD &lt;file&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。","categories":[{"name":"Git使用","slug":"Git使用","permalink":"http://example.com/categories/Git%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"重拾java: jav中的集合（collection）","slug":"重拾java-java-中的集合","date":"2022-02-14T15:33:41.000Z","updated":"2022-02-18T20:25:21.759Z","comments":true,"path":"2022/02/14/重拾java-java-中的集合/","link":"","permalink":"http://example.com/2022/02/14/%E9%87%8D%E6%8B%BEjava-java-%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88/","excerpt":"","text":"集合Java的中的 集合框架包含两种类型的容器: 集合（collection）,图（map）。 ###集合（collection）collection有三种子类型：List,Set,Queue。 再是一些抽象是实现类。最后是具体实现类。常用的有：ArrayList,LinkedList,HashSet等等、 ###图（map）遍历map的四种方法 iterator 遍历collection接口要求所有的子类需要实现iterator()方法返回iterator，注意：iterator()方法是java.lang.Iterable接口,被Collection继承。12345678//通过 Iterator 遍历实现List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();list.add(1);list.add(2);list.add(3);for(Iterator itr = list.listIterator();itr.hasNext();)&#123; System.out.println(itr.next());&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[]},{"title":"算法刷题日记","slug":"算法刷题日记","date":"2022-02-13T08:33:06.000Z","updated":"2022-02-24T16:32:58.725Z","comments":true,"path":"2022/02/13/算法刷题日记/","link":"","permalink":"http://example.com/2022/02/13/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/","excerpt":"","text":"数组动态规划 152.乘积最大子序列 2022/2/13 5.最长回文字串 2022/2/13轮转数组 189.轮转数组 2022/2/19双指针 283.移动零 2022/2/20打乱数组 384.打乱数组 2022/2/24","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"学习资源","slug":"学习资源","date":"2022-01-28T11:47:41.000Z","updated":"2022-02-20T20:02:00.271Z","comments":true,"path":"2022/01/28/学习资源/","link":"","permalink":"http://example.com/2022/01/28/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/","excerpt":"","text":"Linux学习笔记（强悍值得一看）链接：https://pan.baidu.com/s/1j_-dd0RSUejJFxFTfW6TgQ 提取码：fnsh 4份优质算法刷题笔记链接: https://pan.baidu.com/s/1yYpZavbtpHGRJbv5zRtWyA 密码: qmi3 Vim从入门到精通 &amp; Vim中文用户手册链接：https://pan.baidu.com/s/1eUsJCQb41yG9QVsXVJ6DQQ 提取码：5f02 Redis6.x 入门到精通实战教程链接：https://pan.baidu.com/share/init?surl=fpaHY1CwBG5KTHlWKv6ycg 提取码：c0ox Git教程 中文PDF+视频链接：https://pan.baidu.com/share/init?surl=HBInqhh0R6bd_tUlhDpA4Q 提取码：fh7i C语言基础资料链接: https://pan.baidu.com/s/1-f4d0DnJbny3-DMrs6smJA 提取码: 49e4 程序员英语词汇1700词链接：https://pan.baidu.com/s/1L8nR-ci8iqkZLF61H7PbJw 提取码：gdhj 计算机专业必看书籍及视频教程https://www.zhihu.com/question/438642229/answer/1841323980 MySQL基础入门到精通视频教程（内含MySQL34道面试题）https://www.bilibili.com/video/BV1fx411X7BD Java零基础教程视频（适合Java 0基础，Java初学入门）https://www.bilibili.com/video/BV1Rx411876f 一二线城市知名 IT互联网公司名单（最新整理版）出炉！https://www.lxlinux.net/7856.html GitHub加速插件链接：https://pan.baidu.com/s/1xukH6MrIuUKijrq0b9NV7A 提取码：7ag0 名校计算机专业学习资料北大：https://github.com/lib-pku/libpku 清华：https://github.com/PKUanonym/REKCARC-TSC-UHT 浙大：https://github.com/QSCTech/zju-icicles 计算机基础知识学习笔记PDF版链接: https://pan.baidu.com/s/1cf1k9FFVYudf-e-UATjO_A 提取码: quxu 操作系统学习笔记PDF版链接: https://pan.baidu.com/s/1Kn36FLovgZA5vilJftUczg 提取码: gppe 图解网络（小林）链接：https://pan.baidu.com/s/1doCAerxNO-3M1vqn820WNg 提取码：5l38 VMWare安装包及序列号：链接: https://pan.baidu.com/s/1J34PLr0i2F7Nt3_aScdlrA 提取码: kydn Linux内核及各发行版镜像：链接：https://pan.baidu.com/s/1kyD2dcMOdDAYf5tmBEtn9w 提取码：2h9v MobaXterm安装包：链接：https://pan.baidu.com/s/1Wsv1BRQiNlk3Yl0bphpeCw 提取码：jut6 IDEA永久激活：链接：https://pan.baidu.com/s/1Yfc5ft7E2t7IQWIGejFydw 提取码：aabb Source Insight破解版：链接：https://pan.baidu.com/s/1UdpMdFK_mVD1a7y5tak1sA 提取码：vkk5 java学习路线指南：链接：https://github.com/liyupi/code-roadmap/blob/main/docs/roadmap/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.md","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-28T03:59:16.258Z","updated":"2022-01-28T03:59:16.258Z","comments":true,"path":"2022/01/28/hello-world/","link":"","permalink":"http://example.com/2022/01/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"os","slug":"os","permalink":"http://example.com/categories/os/"},{"name":"TodoList","slug":"TodoList","permalink":"http://example.com/categories/TodoList/"},{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"Git使用","slug":"Git使用","permalink":"http://example.com/categories/Git%E4%BD%BF%E7%94%A8/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[]}